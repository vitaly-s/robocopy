#!/bin/sh

# customized items of package
if [ -z "$SYNOPKG_PKGNAME" ]; then
	# prior DSM 3.2, start script will be run without environment variable
	#  at boot time, thus we need a workaround to gather name and version info
	PACKAGE_NAME="robocopy"
	PACKAGE_VER=`get_key_value "/var/packages/${PACKAGE_NAME}/INFO" "version"`
else
	PACKAGE_NAME=$SYNOPKG_PKGNAME
	PACKAGE_VER=$SYNOPKG_PKGVER
fi
PACKAGE_DIR="/var/packages/$PACKAGE_NAME"
PRIVATE_LOCATION="/var/packages/$PACKAGE_NAME/target"
PACKAGE_USERCONF_DIR="${PACKAGE_DIR}/etc"
#PACKAGE_LIMIT_KEY="synoav_limit"
#UPGRADE_FILE="/tmp/robocopy.upgrade"

#PKG_APP_PATH="${PRIVATE_LOCATION}/app"
#PKG_INDEXDB_PATH="${PRIVATE_LOCATION}/indexdb"
#APP_PATH="/var/packages/${PACKAGE_NAME}/etc/enabled"

# general routines
#DSM_CONFIG="/etc.defaults/synoinfo.conf"
#DSM_INDEX_ADD="/usr/syno/bin/pkgindexer_add"
#DSM_INDEX_DEL="/usr/syno/bin/pkgindexer_del"
DSM_VERSION="${SYNOPKG_DSM_VERSION_MAJOR}.${SYNOPKG_DSM_VERSION_MINOR}-${SYNOPKG_DSM_VERSION_BUILD}"
PACKAGE_ENABLED="${PACKAGE_DIR}/enabled"
#PACKAGE_LIMIT=`get_key_value ${DSM_CONFIG} ${PACKAGE_LIMIT_KEY}`
LOGFILE="/var/log/${PACKAGE_NAME}.log"

MY_USBCOPY="$PRIVATE_LOCATION/bin/robocopy.pl"

SYNO_DEF_INFO="/etc.defaults/synoinfo.conf"
#SYNO_BLOCK_AGENT="/usr/syno/hotplug/block.agent"
SYNO_USBCOPY="/usr/syno/bin/synousbcopy"

SYNO_BIN_FILES="synoshare synouser synogroup synonet synoservice synowin"
SRC_FILES="bin/robocopy.pl
ui/robocopy.cgi
lib/integration.pm
lib/rule.pm
lib/rule_processor.pm
lib/Syno.pm
lib/task_info.pm
lib/FileInfo.pm
lib/integration.pm
lib/Locator.pm
lib/Settings.pm
lib/Template.pm
"

SUPPORT_USBCOPY=`get_key_value "${SYNO_DEF_INFO}" "usbcopy"`
SUPPORT_SDCOPY=`get_key_value "${SYNO_DEF_INFO}" "sdcopy"`


start() {
	echo "Start ${PACKAGE_NAME} ${PACKAGE_VER} on DSM ${DSM_VERSION}" 1>>$LOGFILE
#	echo "SYNOPKG_PKGDEST: ${SYNOPKG_PKGDEST}" 1>>$LOGFILE

#	for file in $SYNO_BIN_FILES
#	do
#		if [ ! -e "/usr/syno/bin/$file" ]
#		then
#			echo "Create link to $file" 1>>$LOGFILE
#			ln -s "/usr/syno/sbin/$file" "/usr/syno/bin/"
#		fi
##		[ -f "/usr/syno/bin/$file" ] || ln -s "/usr/syno/sbin/$file" "/usr/syno/bin/"
#	done

##	[ -e /usr/syno/bin/robocopy ] || ln -s $PRIVATE_LOCATION/bin/robocopy.pl /usr/syno/bin/robocopy
##	
##	if [ -n "$MY_USBCOPY" ] && ([ "x${SUPPORT_USBCOPY}" == "xyes" ] || [ "x${SUPPORT_SDCOPY}" == "xyes" ])
##	then
##		if [ -f ${SYNO_USBCOPY} -a ! -h ${SYNO_USBCOPY} ]; then
##			echo "Replace synousbcopy" 1>>$LOGFILE
##			mv -f ${SYNO_USBCOPY} ${SYNO_USBCOPY}_bin
##			ln -s ${MY_USBCOPY} ${SYNO_USBCOPY}
##		fi
##	else
##		echo "Add 99robocopy.hotplug" 1>>$LOGFILE
##		ln -s $PRIVATE_LOCATION/bin/hotplug.sh /usr/syno/hotplug.d/default/99robocopy.hotplug
##	fi
	# Validate 
	HAS_ERROR=0
	for file in $SRC_FILES
	do
		VALID_RESULT=`perl -I"${PRIVATE_LOCATION}/lib" -c "${PRIVATE_LOCATION}/${file}" 2>&1`
		if [ "$?"  -ne 0 ]
		then
			HAS_ERROR=1
			echo "   File '${file##*/}' - invalid" 1>>$LOGFILE
#			echo "-------------------------------" 1>>$LOGFILE
#			echo "${VALID_RESULT}" 1>>$LOGFILE
#			echo "-------------------------------" 1>>$LOGFILE
#		else
#			echo "   File '${file##*/}' - valid" 1>>$LOGFILE
		fi
	done
	if [ "$HAS_ERROR"  -ne 0 ]; then
		exit 1
	fi


	if [ "$SYNOPKG_DSM_VERSION_MAJOR" == "4" ]; then
		echo "   Restore integration setting" 1>>$LOGFILE
		perl -e "require qw(${PRIVATE_LOCATION}/lib/integration.pm) ; integration::restore_state();"
	fi
}

stop() {
	echo "Stop ${PACKAGE_NAME} ${PACKAGE_VER} on DSM ${DSM_VERSION}" 1>>$LOGFILE
##	if [ -h ${SYNO_USBCOPY} -a -f ${SYNO_USBCOPY}_bin ]; then
##		echo "Restore synousbcopy" 1>>$LOGFILE
##		mv -f ${SYNO_USBCOPY}_bin ${SYNO_USBCOPY}
##	fi
##	if [ -e /usr/syno/hotplug.d/default/99robocopy.hotplug ]; then
##		echo "Remove 99robocopy.hotplug" 1>>$LOGFILE
##		rm -f /usr/syno/hotplug.d/default/99robocopy.hotplug
##	fi
##	rm -f /usr/syno/bin/robocopy
	if [ "$SYNOPKG_DSM_VERSION_MAJOR" == "4" ]; then
		echo "   Save integration settingd" 1>>$LOGFILE
		perl -e "require qw(${PRIVATE_LOCATION}/lib/integration.pm) ; integration::save_state(1);"
	fi
}


preupgrade() {
#	$SYNOPKG_OLD_PKGVER
#	$SYNOPKG_PKGVER
#	touch ${UPGRADE_FILE}
#	echo "PreUpgrade ${PACKAGE_NAME} ${PACKAGE_VER}" 1>>$LOGFILE
#	set >> /tmp/robocopy.preupgrade
	exit 0
}

postupgrade() {
#	rm -f ${UPGRADE_FILE}
	exit 0
}

preuninst() {
#	if [ ! -e ${UPGRADE_FILE} ]; then
	if [ "$SYNOPKG_PKG_STATUS" != "UPGRADE" ]; then
		#remove user config file
		rm -f "${PACKAGE_USERCONF_DIR}/rules.conf"
		rm -f "${PACKAGE_USERCONF_DIR}/settings.conf"
		rm -f "${PACKAGE_USERCONF_DIR}/integration.conf"
		# remove LOG file
		rm -f "${LOGFILE}"
	fi
	
	exit 0
}

postuninst() {
#	if [ "$SYNOPKG_PKG_STATUS" != "UPGRADE" ]; then
#		#remove user config file
#		rm -f "/usr/syno/etc/packages/${PACKAGE_NAME}"
#	fi
	exit 0
}

preinst() {
	exit 0
}

postinst() {
	echo "PostInst ${PACKAGE_NAME} ${PACKAGE_VER} on DSM ${DSM_VERSION}" 1>>$LOGFILE
	chmod 0755 $PRIVATE_LOCATION/bin/robocopy.pl
	chmod 0755 $PRIVATE_LOCATION/bin/hotplug.sh
	chmod 0755 $PRIVATE_LOCATION/ui/robocopy.cgi
#	if [ -f ${SYNO_USBCOPY}_bin ]; then
#		echo "Restore usbcopy" 1>>$LOGFILE
#		mv -f ${SYNO_USBCOPY}_bin ${SYNO_USBCOPY}
#	fi
#	echo "PKGWIZARD_CREATE_DEMO: ${PKGWIZARD_CREATE_DEMO}" 1>>$LOGFILE
	if [ "x${PKGWIZARD_CREATE_DEMO}" == "xtrue" ]; then
		if [ -z "$PKGWIZARD_SHARE" ]; then
			PKGWIZARD_SHARE=`/usr/syno/sbin/synoshare --enum local | tail -n+3 | grep photo`
			[ -z "$PKGWIZARD_SHARE" ] && PKGWIZARD_SHARE=`/usr/syno/sbin/synoshare --enum local | tail -n+3 | head -n 1`
		fi
		if [ -n "$PKGWIZARD_SHARE" ]; then
			echo "    Create demo configuration [${PKGWIZARD_SHARE}]." 1>>$LOGFILE
#			echo "require qw(${PRIVATE_LOCATION}/lib/rule.pm) ; rule::create_demo('${PKGWIZARD_SHARE}');" 1>>$LOGFILE
			perl -e "require qw(${PRIVATE_LOCATION}/lib/rule.pm) ; rule::create_demo('${PKGWIZARD_SHARE}');"
		else
			echo "    Cannot create demo configuration." 1>>$LOGFILE
		fi
	fi
	
#	set >> /tmp/robocopy.postinst

	# fix error status on DS 4.2
	if [ -e ${PRIVATE_LOCATION}/conf_pkgcenter ]; then
		cp -a ${PRIVATE_LOCATION}/conf_pkgcenter ${PACKAGE_DIR}/conf
	fi

	exit 0
}
